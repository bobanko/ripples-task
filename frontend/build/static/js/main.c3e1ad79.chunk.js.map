{"version":3,"sources":["images/logo-ripples.svg","session.service.js","App.jsx","reportWebVitals.js","index.js"],"names":["config","this","sessionStorage","getItem","sessionId","setItem","a","createSessionUrl","apiUrl","fetch","method","then","data","text","counter","body","headers","JSON","stringify","json","session","_getLocalSessionId","_createSessionId","_saveLocalSessionId","getSessionUrl","App","console","log","useState","setSessionId","imgCount","setImgCount","isLoading","setIsLoading","updateImgCount","_imgCount","sessionService","updateSession","sessionData","useEffect","getSessionId","_sessionId","getSession","_id","className","disabled","onClick","Array","fill","map","_","index","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3e1ad79.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-ripples.01525a42.svg\";","class SessionService {\n  constructor(config) {\n    this.config = config;\n  }\n\n  _getLocalSessionId() {\n    return sessionStorage.getItem(\"sessionId\");\n  }\n\n  _saveLocalSessionId(sessionId) {\n    sessionStorage.setItem(\"sessionId\", sessionId);\n  }\n\n  async _createSessionId() {\n    const createSessionUrl = `${this.config.apiUrl}/sessions/create`;\n\n    const sessionId = await fetch(createSessionUrl, { method: \"post\" }).then(\n      data => data.text()\n    );\n\n    if (!sessionId) return null;\n\n    return sessionId;\n  }\n\n  async updateSession({ sessionId, counter }) {\n    const createSessionUrl = `${this.config.apiUrl}/sessions/update`;\n\n    const body = { sessionId, counter };\n\n    const session = await fetch(createSessionUrl, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    }).then(data => data.json());\n\n    return session;\n  }\n  // ##################\n  async getSessionId() {\n    const sessionId =\n      this._getLocalSessionId() || (await this._createSessionId());\n\n    this._saveLocalSessionId(sessionId);\n\n    return sessionId;\n  }\n\n  async getSession(sessionId) {\n    const getSessionUrl = `${this.config.apiUrl}/sessions/get?sessionId=${sessionId}`;\n\n    const session = await fetch(getSessionUrl, { method: \"get\" }).then(data =>\n      data.json()\n    );\n\n    if (!session) return null;\n\n    return session;\n  }\n}\n\nexport default new SessionService({\n  apiUrl: \"http://localhost:3030\",\n});\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nimport logo from \"./images/logo-ripples.svg\";\nimport sessionService from \"./session.service\";\n\nfunction App() {\n  console.log(\"render\");\n\n  const minImgCount = 0;\n  const maxImgCount = 100;\n  const defaultImgCount = 3;\n  // const rowSize = 5;\n\n  const [sessionId, setSessionId] = useState(null);\n\n  const [imgCount, setImgCount] = useState(0);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    sessionService.getSessionId().then(async _sessionId => {\n      const session = await sessionService.getSession(_sessionId);\n\n      setSessionId(session._id);\n      setImgCount(session.counter);\n    });\n  }, []);\n\n  function updateImgCount(_imgCount) {\n    setIsLoading(true);\n    return sessionService\n      .updateSession({ sessionId, counter: _imgCount })\n      .then(sessionData => {\n        setImgCount(+sessionData.counter);\n        setIsLoading(false);\n      });\n  }\n\n  function increaseImgCount() {\n    if (imgCount >= maxImgCount) return;\n\n    updateImgCount(imgCount + 1);\n  }\n\n  function decreaseImgCount() {\n    if (imgCount <= minImgCount) return;\n\n    updateImgCount(imgCount - 1);\n  }\n\n  function resetImgCount() {\n    updateImgCount(defaultImgCount);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>üåÅ image gallery [{imgCount}]</h1>\n      <header className=\"p-2\">\n        <button\n          className=\"m-1\"\n          disabled={imgCount >= maxImgCount || isLoading}\n          onClick={increaseImgCount}\n        >\n          ‚ûï\n        </button>\n        <button\n          className=\"m-1\"\n          disabled={imgCount <= minImgCount || isLoading}\n          onClick={decreaseImgCount}\n        >\n          ‚ûñ\n        </button>\n        <button className=\"m-1\" disabled={isLoading} onClick={resetImgCount}>\n          üîÑ reset to {defaultImgCount}\n        </button>\n      </header>\n\n      <section className=\"img-container\">\n        {Array(imgCount)\n          .fill(0)\n          .map((_, index) => (\n            // in this case using array index as a key is fine\n            <img key={index} src={logo} className=\"img\" alt=\"tile\" />\n          ))}\n      </section>\n\n      <div className=\"debug-placeholder\">\n        <div className=\"session-info\">sessionId:{sessionId}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}